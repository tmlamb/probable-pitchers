diff --git a/node_modules/next-auth/core/index.js b/node_modules/next-auth/core/index.js
index c9ad566..0784165 100644
--- a/node_modules/next-auth/core/index.js
+++ b/node_modules/next-auth/core/index.js
@@ -59,7 +59,7 @@ async function toInternalRequest(req) {
 }
 
 async function NextAuthHandler(params) {
-  var _req$body$callbackUrl, _req$body, _req$query2, _req$body2;
+  var _req$body$callbackUrl, _req$body, _req$query2, _req$body2, _req$body3;
 
   const {
     options: userOptions,
@@ -75,31 +75,16 @@ async function NextAuthHandler(params) {
   if (Array.isArray(assertionResult)) {
     assertionResult.forEach(_logger.default.warn);
   } else if (assertionResult instanceof Error) {
-    var _req$query, _req$query$callbackUr;
-
-    _logger.default.error(assertionResult.code, assertionResult);
-
-    const htmlPages = ["signin", "signout", "error", "verify-request"];
-
-    if (!htmlPages.includes(req.action) || req.method !== "GET") {
-      const message = `There is a problem with the server configuration. Check the server logs for more information.`;
-      return {
-        status: 500,
-        headers: [{
-          key: "Content-Type",
-          value: "application/json"
-        }],
-        body: {
-          message
-        }
-      };
-    }
+    var _req$query;
 
     const {
       pages,
       theme
     } = userOptions;
-    const authOnErrorPage = (pages === null || pages === void 0 ? void 0 : pages.error) && ((_req$query = req.query) === null || _req$query === void 0 ? void 0 : (_req$query$callbackUr = _req$query.callbackUrl) === null || _req$query$callbackUr === void 0 ? void 0 : _req$query$callbackUr.startsWith(pages.error));
+
+    _logger.default.error(assertionResult.code, assertionResult);
+
+    const authOnErrorPage = (pages === null || pages === void 0 ? void 0 : pages.error) && req.action === "signin" && ((_req$query = req.query) === null || _req$query === void 0 ? void 0 : _req$query.callbackUrl.startsWith(pages.error));
 
     if (!(pages !== null && pages !== void 0 && pages.error) || authOnErrorPage) {
       if (authOnErrorPage) {
@@ -248,6 +233,201 @@ async function NextAuthHandler(params) {
     }
   } else if (method === "POST") {
     switch (action) {
+      case "proxy":
+        {
+          const cookies = {};
+
+          switch ((_req$body3 = req.body) === null || _req$body3 === void 0 ? void 0 : _req$body3.action) {
+            case "signin":
+              {
+                var _csrfTokenRes$cookies, _csrfTokenRes$cookies2, _req$body4, _req$body5, _signInRes$cookies, _signInRes$cookies$fi, _signInRes$cookies2, _signInRes$cookies2$f;
+
+                const csrfTokenRes = await NextAuthHandler({
+                  req: {
+                    host: req.host,
+                    action: "csrf"
+                  },
+                  options: userOptions
+                });
+                const csrfToken = csrfTokenRes.body.csrfToken;
+                const csrfTokenCookie = (_csrfTokenRes$cookies = csrfTokenRes.cookies) === null || _csrfTokenRes$cookies === void 0 ? void 0 : (_csrfTokenRes$cookies2 = _csrfTokenRes$cookies.find(c => c.name === options.cookies.csrfToken.name)) === null || _csrfTokenRes$cookies2 === void 0 ? void 0 : _csrfTokenRes$cookies2.value;
+
+                if (csrfTokenCookie) {
+                  cookies[options.cookies.csrfToken.name] = csrfTokenCookie;
+                }
+
+                const callbackUrl = (_req$body4 = req.body) === null || _req$body4 === void 0 ? void 0 : _req$body4.callbackUrl;
+                cookies[options.cookies.callbackUrl.name] = callbackUrl;
+                const signInRes = await NextAuthHandler({
+                  req: {
+                    host: req.host,
+                    action: "signin",
+                    method: "POST",
+                    cookies,
+                    body: {
+                      csrfToken,
+                      callbackUrl
+                    },
+                    providerId: (_req$body5 = req.body) === null || _req$body5 === void 0 ? void 0 : _req$body5.providerId
+                  },
+                  options: userOptions
+                });
+                const authorizationUrl = signInRes.redirect;
+                const url = new URL(authorizationUrl);
+                const params = new URLSearchParams(url.search);
+                const stateEncrypted = (_signInRes$cookies = signInRes.cookies) === null || _signInRes$cookies === void 0 ? void 0 : (_signInRes$cookies$fi = _signInRes$cookies.find(c => c.name === options.cookies.state.name)) === null || _signInRes$cookies$fi === void 0 ? void 0 : _signInRes$cookies$fi.value;
+                const state = params.get("state");
+                const codeChallenge = params.get("code_challenge");
+                const codeVerifier = (_signInRes$cookies2 = signInRes.cookies) === null || _signInRes$cookies2 === void 0 ? void 0 : (_signInRes$cookies2$f = _signInRes$cookies2.find(c => c.name === options.cookies.pkceCodeVerifier.name)) === null || _signInRes$cookies2$f === void 0 ? void 0 : _signInRes$cookies2$f.value;
+                const provider = options.providers.find(({
+                  id
+                }) => {
+                  var _req$body6;
+
+                  return id === ((_req$body6 = req.body) === null || _req$body6 === void 0 ? void 0 : _req$body6.providerId);
+                });
+                let clientId;
+
+                if ((provider === null || provider === void 0 ? void 0 : provider.type) === "oauth") {
+                  clientId = provider.clientId;
+                }
+
+                return {
+                  headers: [{
+                    key: "Content-Type",
+                    value: "application/json"
+                  }],
+                  body: {
+                    state,
+                    stateEncrypted,
+                    codeVerifier,
+                    codeChallenge,
+                    clientId
+                  }
+                };
+              }
+
+            case "callback":
+              {
+                var _req$body7, _req$body8, _req$body9, _req$body10, _req$body11, _callbackRes$cookies, _callbackRes$cookies$;
+
+                if ((_req$body7 = req.body) !== null && _req$body7 !== void 0 && _req$body7.codeVerifier) {
+                  cookies[options.cookies.pkceCodeVerifier.name] = req.body.codeVerifier;
+                }
+
+                if ((_req$body8 = req.body) !== null && _req$body8 !== void 0 && _req$body8.stateEncrypted) {
+                  cookies[options.cookies.state.name] = req.body.stateEncrypted;
+                }
+
+                const callbackRes = await NextAuthHandler({
+                  req: {
+                    host: req.host,
+                    action: "callback",
+                    cookies,
+                    providerId: (_req$body9 = req.body) === null || _req$body9 === void 0 ? void 0 : _req$body9.providerId,
+                    query: {
+                      state: (_req$body10 = req.body) === null || _req$body10 === void 0 ? void 0 : _req$body10.state,
+                      code: (_req$body11 = req.body) === null || _req$body11 === void 0 ? void 0 : _req$body11.code
+                    }
+                  },
+                  options: userOptions
+                });
+                const location = callbackRes.redirect;
+                const url = new URL(location);
+                const params = new URLSearchParams(url.search);
+                const error = params.get("error");
+
+                if (error) {
+                  return {
+                    body: {
+                      error
+                    }
+                  };
+                }
+
+                const sessionToken = (_callbackRes$cookies = callbackRes.cookies) === null || _callbackRes$cookies === void 0 ? void 0 : (_callbackRes$cookies$ = _callbackRes$cookies.find(c => c.name === options.cookies.sessionToken.name)) === null || _callbackRes$cookies$ === void 0 ? void 0 : _callbackRes$cookies$.value;
+                return {
+                  body: {
+                    sessionToken
+                  }
+                };
+              }
+
+            case "signout":
+              {
+                var _req$body12, _csrfTokenRes$cookies3, _csrfTokenRes$cookies4;
+
+                if ((_req$body12 = req.body) !== null && _req$body12 !== void 0 && _req$body12.sessionToken) {
+                  cookies[options.cookies.sessionToken.name] = req.body.sessionToken;
+                }
+
+                const csrfTokenRes = await NextAuthHandler({
+                  req: {
+                    host: req.host,
+                    action: "csrf"
+                  },
+                  options: userOptions
+                });
+                const csrfToken = csrfTokenRes.body.csrfToken;
+                const csrfTokenCookie = (_csrfTokenRes$cookies3 = csrfTokenRes.cookies) === null || _csrfTokenRes$cookies3 === void 0 ? void 0 : (_csrfTokenRes$cookies4 = _csrfTokenRes$cookies3.find(c => c.name === options.cookies.csrfToken.name)) === null || _csrfTokenRes$cookies4 === void 0 ? void 0 : _csrfTokenRes$cookies4.value;
+
+                if (csrfTokenCookie) {
+                  cookies[options.cookies.csrfToken.name] = csrfTokenCookie;
+                }
+
+                await NextAuthHandler({
+                  req: {
+                    host: req.host,
+                    action: "signout",
+                    method: "POST",
+                    cookies,
+                    body: {
+                      csrfToken
+                    }
+                  },
+                  options: userOptions
+                });
+                return {
+                  body: {
+                    signedOut: true
+                  }
+                };
+              }
+
+            case "session":
+              {
+                var _req$body13;
+
+                if ((_req$body13 = req.body) !== null && _req$body13 !== void 0 && _req$body13.sessionToken) {
+                  cookies[options.cookies.sessionToken.name] = req.body.sessionToken;
+                }
+
+                return await NextAuthHandler({
+                  req: {
+                    host: req.host,
+                    cookies,
+                    action: "session"
+                  },
+                  options: userOptions
+                });
+              }
+
+            case "providers":
+              {
+                return await NextAuthHandler({
+                  req: {
+                    action: "providers"
+                  },
+                  options: userOptions
+                });
+              }
+          }
+
+          return {
+            status: 400
+          };
+        }
+
       case "signin":
         if (options.csrfTokenVerified && options.provider) {
           const signin = await routes.signin({
@@ -312,13 +492,13 @@ async function NextAuthHandler(params) {
       case "_log":
         if (userOptions.logger) {
           try {
-            var _req$body3;
+            var _req$body14;
 
             const {
               code,
               level,
               ...metadata
-            } = (_req$body3 = req.body) !== null && _req$body3 !== void 0 ? _req$body3 : {};
+            } = (_req$body14 = req.body) !== null && _req$body14 !== void 0 ? _req$body14 : {};
 
             _logger.default[level](code, metadata);
           } catch (error) {
diff --git a/node_modules/next-auth/core/types.d.ts b/node_modules/next-auth/core/types.d.ts
index d828ced..43e170f 100644
--- a/node_modules/next-auth/core/types.d.ts
+++ b/node_modules/next-auth/core/types.d.ts
@@ -473,4 +473,4 @@ export interface DefaultUser {
  */
 export interface User extends Record<string, unknown>, DefaultUser {
 }
-export declare type NextAuthAction = "providers" | "session" | "csrf" | "signin" | "signout" | "callback" | "verify-request" | "error" | "_log";
+export declare type NextAuthAction = "providers" | "session" | "csrf" | "signin" | "signout" | "callback" | "verify-request" | "error" | "_log" | "proxy";
diff --git a/node_modules/next-auth/expo/index.d.ts b/node_modules/next-auth/expo/index.d.ts
new file mode 100644
index 0000000..b80bc7f
--- /dev/null
+++ b/node_modules/next-auth/expo/index.d.ts
@@ -0,0 +1,73 @@
+/// <reference types="react" />
+import { Session } from "..";
+import { NextAuthClientConfig } from "../client/_utils";
+import { LoggerInstance } from "../utils/logger";
+import type { ClientSafeProvider, LiteralUnion, SessionProviderProps, SignInOptions, SignInResponse, UseSessionOptions } from "./types";
+import type { BuiltInProviderType, RedirectableProviderType } from "../providers";
+import * as AuthSession from "expo-auth-session";
+import "react-native-url-polyfill/auto";
+export declare function apiBaseUrl(__NEXTAUTH: NextAuthClientConfig): string;
+export declare function fetchData<T = any>(path: string, __NEXTAUTH: NextAuthClientConfig, logger: LoggerInstance, params?: Record<string, any>): Promise<T | null>;
+export declare function getSignInInfo({ provider, proxyRedirectUri, }: {
+    provider: string;
+    proxyRedirectUri: string;
+}): Promise<{
+    state: string;
+    stateEncrypted: string;
+    codeVerifier: string;
+    codeChallenge: string;
+    clientId: string;
+} | null>;
+export declare type SessionContextValue = {
+    data: Session;
+    status: "authenticated";
+} | {
+    data: null;
+    status: "unauthenticated" | "loading";
+};
+/**
+ * React Hook that gives you access
+ * to the logged in user's session data.
+ *
+ * [Documentation](https://next-auth.js.org/getting-started/client#usesession)
+ */
+export declare function useSession(options?: UseSessionOptions): SessionContextValue;
+export declare function getSession(): Promise<Session | null>;
+/**
+ * It calls `/api/auth/providers` and returns
+ * a list of the currently configured authentication providers.
+ * It can be useful if you are creating a dynamic custom sign in page.
+ *
+ * [Documentation](https://next-auth.js.org/getting-started/client#getproviders)
+ */
+export declare function getProviders(): Promise<Record<LiteralUnion<BuiltInProviderType, string>, ClientSafeProvider> | null>;
+export interface SigninResult {
+    result: AuthSession.AuthSessionResult;
+    state: string;
+    stateEncrypted: string;
+    codeVerifier?: string;
+    provider: string;
+}
+/**
+ * Client-side method to initiate a signin flow
+ * or send the user to the signin page listing all possible providers.
+ * Automatically adds the CSRF token to the request.
+ *
+ * [Documentation](https://next-auth.js.org/getting-started/client#signin)
+ */
+export declare function signIn<P extends RedirectableProviderType | undefined = undefined>(initiateExpoAuthFlow: () => Promise<SigninResult | null>, options?: SignInOptions): Promise<P extends RedirectableProviderType ? SignInResponse | undefined : undefined>;
+/**
+ * Signs the user out, by removing the session cookie.
+ * Automatically adds the CSRF token to the request.
+ *
+ * [Documentation](https://next-auth.js.org/getting-started/client#signout)
+ */
+export declare function signOut(): Promise<void>;
+/**
+ * Provider to wrap the app in to make session data available globally.
+ * Can also be used to throttle the number of requests to the endpoint
+ * `/api/auth/session`.
+ *
+ * [Documentation](https://next-auth.js.org/getting-started/client#sessionprovider)
+ */
+export declare function SessionProvider(props: SessionProviderProps): JSX.Element;
diff --git a/node_modules/next-auth/expo/index.js b/node_modules/next-auth/expo/index.js
new file mode 100644
index 0000000..596ab43
--- /dev/null
+++ b/node_modules/next-auth/expo/index.js
@@ -0,0 +1,262 @@
+"use strict";
+
+var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.SessionProvider = SessionProvider;
+exports.apiBaseUrl = apiBaseUrl;
+exports.fetchData = fetchData;
+exports.getProviders = getProviders;
+exports.getSession = getSession;
+exports.getSignInInfo = getSignInInfo;
+exports.signIn = signIn;
+exports.signOut = signOut;
+exports.useSession = useSession;
+
+var React = _interopRequireWildcard(require("react"));
+
+var _utils = require("../client/_utils");
+
+var _logger2 = _interopRequireWildcard(require("../utils/logger"));
+
+var _parseUrl = _interopRequireDefault(require("../utils/parse-url"));
+
+var _expoConstants = _interopRequireDefault(require("expo-constants"));
+
+var SecureStore = _interopRequireWildcard(require("expo-secure-store"));
+
+var _reactNative = require("react-native");
+
+require("react-native-url-polyfill/auto");
+
+var _Constants$expoConfig, _Constants$expoConfig2;
+
+function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
+
+function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
+
+const storageKeys = {
+  sessionToken: "next-auth.sessionToken"
+};
+
+function apiBaseUrl(__NEXTAUTH) {
+  return `${__NEXTAUTH.baseUrlServer}${__NEXTAUTH.basePathServer}`;
+}
+
+async function fetchData(path, __NEXTAUTH, logger, params) {
+  const url = `${apiBaseUrl(__NEXTAUTH)}/proxy`;
+  const sessionToken = await SecureStore.getItemAsync(storageKeys.sessionToken);
+
+  try {
+    const options = {
+      method: "POST",
+      headers: {
+        "Content-Type": "application/json"
+      },
+      body: JSON.stringify({
+        action: path,
+        sessionToken,
+        ...params
+      })
+    };
+    const res = await fetch(url, options);
+    const data = await res.json();
+    if (!res.ok) throw data;
+    return Object.keys(data).length > 0 ? data : null;
+  } catch (error) {
+    logger.error("CLIENT_FETCH_ERROR", {
+      error: error,
+      url
+    });
+    return null;
+  }
+}
+
+async function getSignInInfo({
+  provider,
+  proxyRedirectUri
+}) {
+  return await fetchData("signin", __NEXTAUTH, logger, {
+    providerId: provider,
+    callbackUrl: proxyRedirectUri
+  });
+}
+
+const nextAuthUrl = (_Constants$expoConfig = _expoConstants.default.expoConfig) === null || _Constants$expoConfig === void 0 ? void 0 : (_Constants$expoConfig2 = _Constants$expoConfig.extra) === null || _Constants$expoConfig2 === void 0 ? void 0 : _Constants$expoConfig2.nextAuthUrl;
+const __NEXTAUTH = {
+  baseUrl: (0, _parseUrl.default)(nextAuthUrl).origin,
+  basePath: (0, _parseUrl.default)(nextAuthUrl).path,
+  baseUrlServer: (0, _parseUrl.default)(nextAuthUrl).origin,
+  basePathServer: (0, _parseUrl.default)(nextAuthUrl).path,
+  _lastSync: 0,
+  _session: undefined,
+  _getSession: () => {}
+};
+const logger = (0, _logger2.proxyLogger)(_logger2.default, __NEXTAUTH.basePath);
+const SessionContext = React.createContext(undefined);
+
+function useSession(options) {
+  const value = React.useContext(SessionContext);
+
+  if (!value && process.env.NODE_ENV !== "production") {
+    throw new Error("[next-auth]: `useSession` must be wrapped in a <SessionProvider />");
+  }
+
+  const {
+    onUnauthenticated
+  } = options !== null && options !== void 0 ? options : {};
+  const unauthenticated = value.status === "unauthenticated";
+  React.useEffect(() => {
+    if (unauthenticated) {
+      if (onUnauthenticated) onUnauthenticated();
+    }
+  }, [unauthenticated, onUnauthenticated]);
+  return value;
+}
+
+async function getSession() {
+  const session = await fetchData("session", __NEXTAUTH, logger);
+  return session;
+}
+
+async function getProviders() {
+  return await fetchData("providers", __NEXTAUTH, logger);
+}
+
+async function signIn(initiateExpoAuthFlow, options) {
+  const signinResult = await initiateExpoAuthFlow();
+
+  if (signinResult === null) {
+    return;
+  }
+
+  const {
+    result,
+    state,
+    codeVerifier,
+    stateEncrypted,
+    provider
+  } = signinResult;
+  if (result.type !== "success") return;
+  const data = await fetchData("callback", __NEXTAUTH, logger, {
+    providerId: provider,
+    code: result.params.code,
+    state,
+    stateEncrypted,
+    codeVerifier
+  });
+
+  if (!data) {
+    _reactNative.Alert.alert("Error", "Callback error.");
+
+    return;
+  }
+
+  const {
+    error,
+    sessionToken
+  } = data;
+
+  if (!!error || !sessionToken) {
+    switch (error) {
+      case "OAuthAccountNotLinked":
+        {
+          _reactNative.Alert.alert("Error", "The email associated with the account you just logged in is being used by another account. Please log into that account and then link to other providers afterwards.");
+
+          break;
+        }
+    }
+
+    return;
+  }
+
+  if (sessionToken) {
+    await SecureStore.setItemAsync(storageKeys.sessionToken, sessionToken);
+    await __NEXTAUTH._getSession({
+      event: "storage"
+    });
+  }
+}
+
+async function signOut() {
+  const data = await fetchData("signout", __NEXTAUTH, logger);
+
+  if (data) {
+    await SecureStore.deleteItemAsync(storageKeys.sessionToken);
+    await __NEXTAUTH._getSession({
+      event: "storage"
+    });
+  }
+}
+
+function SessionProvider(props) {
+  const {
+    children,
+    basePath,
+    refetchInterval
+  } = props;
+  if (basePath) __NEXTAUTH.basePath = basePath;
+  const hasInitialSession = props.session !== undefined;
+  __NEXTAUTH._lastSync = hasInitialSession ? (0, _utils.now)() : 0;
+  const [session, setSession] = React.useState(() => {
+    if (hasInitialSession) __NEXTAUTH._session = props.session;
+    return props.session;
+  });
+  const [loading, setLoading] = React.useState(!hasInitialSession);
+  React.useEffect(() => {
+    __NEXTAUTH._getSession = async ({
+      event
+    } = {}) => {
+      try {
+        const storageEvent = event === "storage";
+
+        if (storageEvent || __NEXTAUTH._session === undefined) {
+          __NEXTAUTH._lastSync = (0, _utils.now)();
+          __NEXTAUTH._session = await getSession();
+          setSession(__NEXTAUTH._session);
+          return;
+        }
+
+        if (!event || __NEXTAUTH._session === null || (0, _utils.now)() < __NEXTAUTH._lastSync) {
+          return;
+        }
+
+        __NEXTAUTH._lastSync = (0, _utils.now)();
+        __NEXTAUTH._session = await getSession();
+        setSession(__NEXTAUTH._session);
+      } catch (error) {
+        logger.error("CLIENT_SESSION_ERROR", error);
+      } finally {
+        setLoading(false);
+      }
+    };
+
+    __NEXTAUTH._getSession();
+
+    return () => {
+      __NEXTAUTH._lastSync = 0;
+      __NEXTAUTH._session = undefined;
+
+      __NEXTAUTH._getSession = () => {};
+    };
+  }, []);
+  React.useEffect(() => {
+    if (refetchInterval) {
+      const refetchIntervalTimer = setInterval(() => {
+        if (__NEXTAUTH._session) {
+          __NEXTAUTH._getSession({
+            event: "poll"
+          });
+        }
+      }, refetchInterval * 1000);
+      return () => clearInterval(refetchIntervalTimer);
+    }
+  }, [refetchInterval]);
+  const value = React.useMemo(() => ({
+    data: session,
+    status: loading ? "loading" : session ? "authenticated" : "unauthenticated"
+  }), [session, loading]);
+  return <SessionContext.Provider value={value}>{children}</SessionContext.Provider>;
+}
\ No newline at end of file
diff --git a/node_modules/next-auth/expo/types.d.ts b/node_modules/next-auth/expo/types.d.ts
new file mode 100644
index 0000000..5a7b497
--- /dev/null
+++ b/node_modules/next-auth/expo/types.d.ts
@@ -0,0 +1,51 @@
+/// <reference types="react" />
+import type { Session } from "..";
+import type { BuiltInProviderType, ProviderType } from "../providers";
+export interface UseSessionOptions {
+    /** Defaults to `signIn` */
+    onUnauthenticated?: () => void;
+}
+/**
+ * Util type that matches some strings literally, but allows any other string as well.
+ * @source https://github.com/microsoft/TypeScript/issues/29729#issuecomment-832522611
+ */
+export declare type LiteralUnion<T extends U, U = string> = T | (U & Record<never, never>);
+export interface ClientSafeProvider {
+    id: LiteralUnion<BuiltInProviderType>;
+    name: string;
+    type: ProviderType;
+    signinUrl: string;
+    callbackUrl: string;
+}
+export interface SignInOptions extends Record<string, unknown> {
+    /**
+     * Defaults to the current URL.
+     * @docs https://next-auth.js.org/getting-started/client#specifying-a-callbackurl
+     */
+    callbackUrl?: string;
+    /** @docs https://next-auth.js.org/getting-started/client#using-the-redirect-false-option */
+    redirect?: boolean;
+}
+export interface SignInResponse {
+    error: string | undefined;
+    status: number;
+    ok: boolean;
+    url: string | null;
+}
+/** @docs: https://next-auth.js.org/getting-started/client#options */
+export interface SessionProviderProps {
+    children: React.ReactNode;
+    session?: Session | null;
+    baseUrl?: string;
+    basePath?: string;
+    /**
+     * A time interval (in seconds) after which the session will be re-fetched.
+     * If set to `0` (default), the session is not polled.
+     */
+    refetchInterval?: number;
+    /**
+     * `SessionProvider` automatically refetches the session when the user switches between windows.
+     * This option activates this behaviour if set to `true` (default).
+     */
+    refetchOnWindowFocus?: boolean;
+}
diff --git a/node_modules/next-auth/expo/types.js b/node_modules/next-auth/expo/types.js
new file mode 100644
index 0000000..430afc1
--- /dev/null
+++ b/node_modules/next-auth/expo/types.js
@@ -0,0 +1,5 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
\ No newline at end of file
