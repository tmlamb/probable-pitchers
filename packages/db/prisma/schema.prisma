generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String         @id @default(cuid())
  subscriptions        Subscription[]
  accounts             Account[]
  sessions             Session[]
  devices              Device[]
  notifications        Notification[]
  notificationsEnabled Boolean        @default(true)
  email                String?        @unique
  emailVerified        DateTime?
  image                String?
}

model Device {
  id        String @id @default(cuid())
  pushToken String @unique
  timezone  String
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id       Int       @id
  name     String    @unique
  pitchers Pitcher[]
}

model Pitcher {
  id            Int            @id
  name          String
  team          Team           @relation(fields: [teamId], references: [id])
  teamId        Int
  homeGames     Game[]         @relation("HomePitcher")
  awayGames     Game[]         @relation("AwayPitcher")
  subscriptions Subscription[]
  notifications Notification[]

  @@fulltext([name])
}

model Game {
  id            Int            @id
  date          DateTime
  homePitcher   Pitcher?       @relation("HomePitcher", fields: [homePitcherId], references: [id])
  homePitcherId Int?
  awayPitcher   Pitcher?       @relation("AwayPitcher", fields: [awayPitcherId], references: [id])
  awayPitcherId Int?
  notifications Notification[]
}

model Subscription {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  pitcher   Pitcher @relation(fields: [pitcherId], references: [id], onDelete: Cascade)
  pitcherId Int

  @@unique([userId, pitcherId])
}

model Notification {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  game      Game      @relation(fields: [gameId], references: [id])
  gameId    Int
  pitcher   Pitcher   @relation(fields: [pitcherId], references: [id])
  pitcherId Int
  sentOn    DateTime?

  @@unique([userId, gameId, pitcherId])
}
