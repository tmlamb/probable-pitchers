generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  subscriptions Subscription[]
  accounts      Account[]
  sessions      Session[]
  devices       Device[]
  email         String?        @unique
  emailVerified DateTime?
  image         String?
}

model Device {
  id                   String  @id @default(cuid())
  pushToken            String
  timezone             String
  userId               String
  notificationsEnabled Boolean @default(true)
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications        Notification[]

  @@unique([id, userId])
  @@unique([pushToken, userId])
}

model Team {
  id           Int       @id
  name         String    @unique
  abbreviation String?
  pitchers     Pitcher[]
}

model Pitcher {
  id            Int            @id
  name          String
  team          Team           @relation(fields: [teamId], references: [id])
  teamId        Int
  homeGames     Game[]         @relation("HomePitcher")
  awayGames     Game[]         @relation("AwayPitcher")
  subscriptions Subscription[]
  notifications Notification[]
  primaryNumber String?
}

model Game {
  id            Int            @id
  date          DateTime
  homePitcher   Pitcher?       @relation("HomePitcher", fields: [homePitcherId], references: [id])
  homePitcherId Int?
  awayPitcher   Pitcher?       @relation("AwayPitcher", fields: [awayPitcherId], references: [id])
  awayPitcherId Int?
  notifications Notification[]
}

model Subscription {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  pitcher   Pitcher @relation(fields: [pitcherId], references: [id], onDelete: Restrict)
  pitcherId Int

  @@unique([userId, pitcherId])
  @@unique([id, userId])
}

model Notification {
  id        Int       @id @default(autoincrement())
  device    Device    @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  deviceId  String
  game      Game      @relation(fields: [gameId], references: [id], onDelete: Restrict)
  gameId    Int
  pitcher   Pitcher   @relation(fields: [pitcherId], references: [id], onDelete: Restrict)
  pitcherId Int
  sentOn    DateTime?

  @@unique([deviceId, gameId, pitcherId])
}
