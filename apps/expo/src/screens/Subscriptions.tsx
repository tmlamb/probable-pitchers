import { AntDesign } from "@expo/vector-icons";
import { Pitcher, Subscription } from "@probable/db";
import { PermissionStatus } from "expo-modules-core";
import * as Notifications from "expo-notifications";
import React, { useEffect, useState } from "react";
import { ActivityIndicator, StyleProp, View, ViewStyle } from "react-native";
import Animated, {
  Easing,
  FadeIn,
  FadeOut,
  Layout,
  useAnimatedStyle,
  useSharedValue,
  withTiming,
} from "react-native-reanimated";
import * as Sentry from "sentry-expo";
import ButtonContainer from "../components/ButtonContainer";
import ScreenLayout from "../components/ScreenLayout";
import SearchInput from "../components/SearchInput";
import {
  AlertText,
  PrimaryText,
  SecondaryText,
  SpecialText,
  specialTextColor,
  ThemedView,
} from "../components/Themed";
import { trpc } from "../components/TRPCProvider";
import { useTrackParallelMutations } from "../hooks/use-track-parallel-mutations";
import tw from "../tailwind";

const SubscriptionButton = ({
  onPress,
  disabled,
  children,
  style,
}: {
  onPress: () => void;
  disabled: boolean;
  children: React.ReactNode;
  style: StyleProp<Animated.AnimateStyle<StyleProp<ViewStyle>>>;
}) => {
  return (
    <ButtonContainer
      style={tw`-my-3 -mr-3 py-3 pl-3 pr-3`}
      onPress={onPress}
      accessibilityLabel={""}
      disabled={disabled}
    >
      <Animated.View style={style}>{children}</Animated.View>
    </ButtonContainer>
  );
};

export const Subscriptions = () => {
  const mutationTracker = useTrackParallelMutations();

  const {
    data: subscriptions,
    isSuccess: subscriptionsFetched,
    isFetching: subscriptionsFetching,
  } = trpc.subscription.byUserId.useQuery(undefined, {
    enabled: !mutationTracker.isMutating(),
    refetchOnMount: false,
  });

  const [searchFilter, setSearchFilter] = useState<string>();

  const {
    data: pitchersFromSearch,
    isSuccess,
    isInitialLoading,
    isFetching,
    isError,
  } = trpc.pitcher.byNameSearch.useQuery(searchFilter?.split(" ") || [], {
    enabled: !!searchFilter && subscriptionsFetched,
  });

  const utils = trpc.useContext();

  const pitchers = pitchersFromSearch?.map((pitcher) => ({
    ...pitcher,
    subscription:
      subscriptions?.find((sub) => sub.pitcherId === pitcher.id) || undefined,
  }));

  const { mutate: subscribe } = trpc.subscription.create.useMutation({
    onMutate: ({ pitcherId }) => {
      mutationTracker.startOne();
      const previousSubscriptions = utils.subscription.byUserId.getData();
      utils.subscription.byUserId.setData((old) => {
        if (old) {
          const pitcher = pitchers?.find((p) => p.id === pitcherId);
          if (pitcher) {
            return [
              ...old,
              // Optimistically add a new subscription with some dummy data.
              // This dummy data will be replaced with ids generated by the
              // database once the mutation completes.
              {
                id: new Date().valueOf(),
                enabled: true,
                pitcherId: pitcherId,
                userId: "loading",
                pitcher: {
                  id: pitcherId,
                  name: pitcher.name,
                  teamId: pitcher.teamId,
                  homeGames: pitcher.subscription?.pitcher.homeGames || [],
                  awayGames: pitcher.subscription?.pitcher.awayGames || [],
                },
              },
            ];
          }
        }
      });
      return { previousSubscriptions };
    },
    onError: (err, newSubscription, context) => {
      utils.subscription.byUserId.setData(context?.previousSubscriptions);
      Sentry.Native.captureException(err);
    },
    onSettled: () => {
      mutationTracker.endOne();
      if (mutationTracker.allEnded()) {
        utils.subscription.byUserId.invalidate();
        utils.pitcher.byNameSearch.invalidate();
      }
    },
  });

  const { mutate: unsubscribe } = trpc.subscription.delete.useMutation({
    onMutate: (subscriptionId) => {
      mutationTracker.startOne();
      const previousSubscriptions = utils.subscription.byUserId.getData();
      utils.subscription.byUserId.setData((old) =>
        old?.filter((s) => s.id !== subscriptionId)
      );
      return { previousSubscriptions };
    },
    onError: (err, newSubscription, context) => {
      utils.subscription.byUserId.setData(context?.previousSubscriptions);
      Sentry.Native.captureException(err);
    },
    onSettled: () => {
      mutationTracker.endOne();
      if (mutationTracker.allEnded()) {
        utils.subscription.byUserId.invalidate();
        utils.pitcher.byNameSearch.invalidate();
      }
    },
  });

  const [pushStatus, setPushStatus] = useState<PermissionStatus>();

  Notifications.getPermissionsAsync().then(({ status }) => {
    setPushStatus(status);
  });

  // Why not just use section list? It doesn't have support from Reanimated's "itemLayoutAnimation"
  // prop, which we are depending on below for the cool layout transitions.
  const subscribedAndAvailablePitchers: (
    | string
    | (Pitcher & { subscription?: Subscription })
  )[] = [];

  if (subscriptions) {
    const subscribedPitchers =
      (searchFilter
        ? pitchers
            ?.filter((p) => p.subscription)
            .map(
              (p) =>
                ({
                  id: p.id,
                  name: p.name,
                  teamId: p.teamId,
                  subscription: {
                    id: p.subscription!.id,
                    pitcherId: p.id,
                    userId: p.subscription!.userId,
                  },
                } as Pitcher & { subscription?: Subscription })
            )
        : subscriptions.map(
            (s) =>
              ({
                id: s.pitcher.id,
                name: s.pitcher.name,
                teamId: s.pitcher.teamId,
                subscription: {
                  id: s.id,
                  pitcherId: s.pitcherId,
                  userId: s.userId,
                },
              } as Pitcher & { subscription?: Subscription })
          )) || [];
    if (!!subscribedPitchers.length) {
      subscribedAndAvailablePitchers.push("Subscribed");
      subscribedAndAvailablePitchers.push(...subscribedPitchers);
    }
  }

  if (searchFilter) {
    const availablePitchers =
      pitchers?.filter((p) => !p.subscription) || [] || [];
    if (!!availablePitchers.length) {
      subscribedAndAvailablePitchers.push("Available");
      subscribedAndAvailablePitchers.push(...availablePitchers);
    }
  }
  const pauseMutations =
    mutationTracker.isMutating() ||
    isFetching ||
    (!isSuccess && !!searchFilter) ||
    subscriptionsFetching;
  const opacity = useSharedValue(1);

  useEffect(() => {
    opacity.value = withTiming(pauseMutations ? 0.4 : 1, {
      duration: 150,
      easing: Easing.linear,
    });
  }, [pauseMutations]);

  const style = useAnimatedStyle(() => ({ opacity: opacity.value }), []);

  return (
    <ScreenLayout>
      <Animated.View style={tw`pt-9 px-3 flex-1`} layout={Layout.duration(1)}>
        <SearchInput
          onChange={(text) => {
            setSearchFilter(text);
          }}
        />
        <Animated.FlatList
          // @ts-ignore - there is a type bug in Reanimated 2.9.x
          itemLayoutAnimation={Layout.duration(250)}
          keyExtractor={(item) => {
            if (typeof item === "string") {
              return item;
            }
            return String(item.id);
          }}
          contentContainerStyle={tw`pb-12`}
          data={subscribedAndAvailablePitchers}
          keyboardShouldPersistTaps="handled"
          renderItem={({ index, item }) => {
            if (typeof item === "string") {
              return (
                <Animated.View entering={FadeIn} exiting={FadeOut}>
                  <View style={tw`flex-row justify-between mb-1.5 mx-3`}>
                    <SecondaryText style={tw`uppercase text-sm`}>
                      {item}
                    </SecondaryText>
                    {index === 0 &&
                      (isFetching ||
                        (!isSuccess && !!searchFilter) ||
                        mutationTracker.isMutating() ||
                        subscriptionsFetching) && (
                        <Animated.View entering={FadeIn} exiting={FadeOut}>
                          <ActivityIndicator size="small" />
                        </Animated.View>
                      )}
                  </View>
                </Animated.View>
              );
            } else {
              return (
                <Animated.View entering={FadeIn} exiting={FadeOut}>
                  <ThemedView
                    style={tw.style(
                      "border-b-2",
                      typeof subscribedAndAvailablePitchers[index - 1] ===
                        "string"
                        ? "rounded-t-xl"
                        : undefined,
                      !subscribedAndAvailablePitchers[index + 1] ||
                        typeof subscribedAndAvailablePitchers[index + 1] ===
                          "string"
                        ? "border-b-0 rounded-b-xl mb-3"
                        : undefined
                    )}
                  >
                    <PrimaryText style={tw`flex-1 pr-2.5`} numberOfLines={1}>
                      {item.name}
                    </PrimaryText>
                    {item.subscription && (
                      <SubscriptionButton
                        onPress={() => {
                          unsubscribe(item.subscription!.id);
                        }}
                        disabled={
                          // item.subscription.userId === "loading" ||
                          pauseMutations
                        }
                        style={style}
                      >
                        <AlertText>
                          <AntDesign name="minuscircle" size={20} />
                        </AlertText>
                      </SubscriptionButton>
                    )}
                    {!item.subscription && (
                      <SubscriptionButton
                        onPress={async () => {
                          if (pushStatus === PermissionStatus.DENIED) {
                            alert(
                              "Permission for this application to send push notifications has been denied. To receive alerts, you must allow notifications for Probable Pitcher in your phone's application settings."
                            );
                          }
                          subscribe({
                            pitcherId: item.id,
                          });
                        }}
                        disabled={pauseMutations}
                        style={style}
                      >
                        <SpecialText>
                          <AntDesign name="pluscircle" size={20} />
                        </SpecialText>
                      </SubscriptionButton>
                    )}
                  </ThemedView>
                </Animated.View>
              );
            }
          }}
          ListEmptyComponent={
            <>
              {isSuccess && (
                <Animated.View entering={FadeIn.delay(150)} exiting={FadeOut}>
                  <SecondaryText
                    style={tw`mb-9 mx-3 text-sm`}
                    accessibilityRole="summary"
                  >
                    No pitchers found. Try changing your search.
                  </SecondaryText>
                </Animated.View>
              )}
              {isInitialLoading ? (
                <Animated.View
                  style={tw`pt-6`}
                  entering={FadeIn}
                  exiting={FadeOut}
                >
                  <ActivityIndicator
                    size="large"
                    color={String(tw.style(specialTextColor).color)}
                  />
                </Animated.View>
              ) : (
                !isSuccess && (
                  <Animated.View entering={FadeIn} exiting={FadeOut}>
                    <SecondaryText
                      style={tw`mb-9 mx-3 text-sm`}
                      accessibilityRole="summary"
                    >
                      Enter a player's name to perform a search.
                    </SecondaryText>
                  </Animated.View>
                )
              )}
              {isError && (
                <Animated.View entering={FadeIn.delay(150)} exiting={FadeOut}>
                  <AlertText
                    style={tw`mb-9 mx-3 text-sm`}
                    accessibilityRole="alert"
                  >
                    An error occurred while performing your search. Please try
                    again later.
                  </AlertText>
                </Animated.View>
              )}
            </>
          }
        />
      </Animated.View>
    </ScreenLayout>
  );
};
