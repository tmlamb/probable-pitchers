import { AntDesign } from "@expo/vector-icons";
import { Game, Pitcher, Subscription } from "@probable/db";
import React, { useEffect, useState } from "react";
import { ActivityIndicator, StyleProp, View, ViewStyle } from "react-native";
import Animated, {
  Easing,
  FadeIn,
  FadeInLeft,
  FadeInRight,
  FadeOut,
  FadeOutLeft,
  FadeOutRight,
  FadeOutUp,
  Layout,
  useAnimatedStyle,
  useSharedValue,
  withTiming,
} from "react-native-reanimated";
import * as Sentry from "sentry-expo";
import ButtonContainer from "../components/ButtonContainer";
import SearchInput from "../components/SearchInput";
import {
  AlertText,
  PrimaryText,
  SecondaryText,
  secondaryTextColor,
  SpecialText,
  specialTextColor,
  ThemedView,
} from "../components/Themed";
import { trpc } from "../components/TRPCProvider";
import { PitcherSubscription, subscriptionSchedule, useTrackParallelMutations } from "@probable/common";
import tw from "../tailwind";
import ModalLayout from "../components/ModalLayout";
import { ClassInput } from "twrnc/dist/esm/types";
import HeaderRightContainer from "../components/HeaderRightContainer";
import HeaderLeftContainer from "../components/HeaderLeftContainer";
import LinkButton from "../components/LinkButton";
import { formatInTimeZone } from "date-fns-tz";
import * as Localization from "expo-localization";
import ScreenLayout from "../components/ScreenLayout";

export const Subscriptions = () => {
  const mutationTracker = useTrackParallelMutations();

  const subscriptions = trpc.subscription.byUserId.useQuery(undefined, {
    enabled: !mutationTracker.isMutating(),
    refetchOnMount: false,
  });

  if (subscriptions.isError) {
    Sentry.Native.captureException(
      `Error fetching subscriptions on homepage: ${subscriptions.error}`
    );
  }

  const schedule = subscriptionSchedule(subscriptions.data);

  const [searchFilter, setSearchFilter] = useState<string>();
  const [isSearchActive, setIsSearchActive] = useState<boolean>(false);

  const search = trpc.pitcher.byFuzzyName.useQuery(searchFilter!, {
    enabled: !!searchFilter && subscriptions.isSuccess,
  });

  if (!search.isError) {
    Sentry.Native.captureException(
      `Error fuzzy searching for pitchers on homepage: ${search.error}`
    );
  }

  const utils = trpc.useContext();

  const pitchers = search.data?.map((pitcher) => ({
    ...pitcher,
    subscription:
      subscriptions.data?.find((sub) => sub.pitcherId === pitcher.id) || undefined,
  }));

  const { mutate: subscribe } = trpc.subscription.create.useMutation({
    onMutate: ({ pitcherId }) => {
      mutationTracker.startOne();
      const previousSubscriptions = utils.subscription.byUserId.getData();
      utils.subscription.byUserId.setData(undefined, (old) => {
        if (old) {
          const pitcher = pitchers?.find((p) => p.id === pitcherId);
          if (pitcher) {
            return [
              ...old,
              // Optimistically add a new subscription with some dummy data.
              // This dummy data will be replaced with ids generated by the
              // database once the mutation completes.
              {
                id: new Date().valueOf(),
                enabled: true,
                pitcherId: pitcherId,
                userId: '',
                pitcher: {
                  id: pitcherId,
                  name: pitcher.name,
                  teamId: pitcher.teamId,
                  homeGames: pitcher.subscription?.pitcher.homeGames || [],
                  awayGames: pitcher.subscription?.pitcher.awayGames || [],
                  primaryNumber: pitcher.primaryNumber,
                  team: { name: '', id: -1, abbreviation: pitcher.abbreviation || '' },
                },
              },
            ];
          }
        }
      });
      return { previousSubscriptions };
    },
    onError: (err, newSubscription, context) => {
      utils.subscription.byUserId.setData(undefined, context?.previousSubscriptions);
      Sentry.Native.captureException(err);
    },
    onSettled: () => {
      mutationTracker.endOne();
      if (mutationTracker.allEnded()) {
        utils.subscription.byUserId.invalidate();
        utils.pitcher.byFuzzyName.invalidate();
      }
    },
  });

  const { mutate: unsubscribe } = trpc.subscription.delete.useMutation({
    onMutate: (subscriptionId) => {
      mutationTracker.startOne();
      const previousSubscriptions = utils.subscription.byUserId.getData();
      utils.subscription.byUserId.setData(undefined, (old) =>
        old?.filter((s) => s.id !== subscriptionId)
      );
      return { previousSubscriptions };
    },
    onError: (err, newSubscription, context) => {
      utils.subscription.byUserId.setData(undefined, context?.previousSubscriptions);
      Sentry.Native.captureException(err);
    },
    onSettled: () => {
      mutationTracker.endOne();
      if (mutationTracker.allEnded()) {
        utils.subscription.byUserId.invalidate();
        utils.pitcher.byFuzzyName.invalidate();
      }
    },
  });

  // Why not just use section list? It doesn't have support from Reanimated's "itemLayoutAnimation"
  // prop, which we are depending on below for the cool layout transitions.
  const subscribedAndAvailablePitchers: (
    | string
    | PitcherSubscription
  )[] = [];

  if (isSearchActive) {
    if (subscriptions) {
      const subscribedPitchers = pitchers?.filter((p) =>
        p.subscription).map((p) => ({ ...p, team: { abbreviation: p.abbreviation } })) || [];
      if (!!subscribedPitchers.length) {
        subscribedAndAvailablePitchers.push("Subscribed");
        subscribedAndAvailablePitchers.push(...subscribedPitchers);
      }
    }

    if (searchFilter) {
      const availablePitchers =
        pitchers?.filter((p) => !p.subscription).map((p) => ({ ...p, team: { abbreviation: p.abbreviation } })) || [];
      if (!!availablePitchers.length) {
        subscribedAndAvailablePitchers.push("Available");
        subscribedAndAvailablePitchers.push(...availablePitchers);
      }
    }
  } else {
    schedule.map((day) => {
      subscribedAndAvailablePitchers.push(day.nextGameDay);
      subscribedAndAvailablePitchers.push(...day.data);
    });
  }

  const pauseMutations =
    mutationTracker.isMutating() ||
    search.isFetching ||
    (!search.isSuccess && !!searchFilter) ||
    subscriptions.isFetching;
  const opacity = useSharedValue(1);

  useEffect(() => {
    opacity.value = withTiming(pauseMutations ? 0.4 : 1, {
      duration: 150,
      easing: Easing.linear,
    });
  }, [pauseMutations]);

  const style = useAnimatedStyle(() => ({ opacity: opacity.value }), []);

  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    if (isSearchActive) setIsEditing(false);
  }, [isSearchActive]);

  if (subscriptions.isLoading) {
    return (
      <ScreenLayout>
        <Animated.View
          style={tw`absolute w-screen h-screen justify-center`}
          entering={FadeIn}
          exiting={FadeOut}
        >
          <ActivityIndicator
            size="large"
            color={String(tw.style(secondaryTextColor).color)}
          />
        </Animated.View>
      </ScreenLayout>
    );
  }

  return (
    <ScreenLayout>
      <HeaderLeftContainer>
        <Animated.View entering={FadeIn.delay(300)} exiting={FadeOut}>
          <LinkButton
            to={{ screen: "Settings" }}
            style={tw`py-6 pl-3 pr-8 -my-6 -ml-4 flex flex-row items-center`}
            accessibilityLabel="Navigate to Application Settings"
          >
            <SpecialText>
              <AntDesign name="setting" size={24} />
            </SpecialText>
          </LinkButton>
        </Animated.View>
      </HeaderLeftContainer>
      <HeaderRightContainer>
        {!!(subscriptions.data?.length) &&
          (isEditing ?
            <ButtonContainer
              onPress={() => setIsEditing((isEditing) => !isEditing)}
              style={tw`py-6 pl-8 pr-3 -my-6 -mr-3 flex flex-row items-center`}
              accessibilityLabel={`${isEditing ? 'Disable' : 'Enable'} edit mode`}
            >
              <SpecialText style={tw`font-bold`}>
                Done
              </SpecialText>
            </ButtonContainer>
            :
            <ButtonContainer
              onPress={() => setIsEditing((isEditing) => !isEditing)}
              style={tw`py-6 pl-8 pr-3 -my-6 -mr-3 flex flex-row items-center`}
              accessibilityLabel={`${isEditing ? 'Disable' : 'Enable'} edit mode`}
            >
              <SpecialText>
                Edit
              </SpecialText>
            </ButtonContainer>
          )}
      </HeaderRightContainer>
      <Animated.View style={tw`pt-6 px-3 flex-1`} layout={Layout.duration(1)}>
        <Animated.FlatList
          // @ts-ignore - there is a type bug in Reanimated 2.9.x
          itemLayoutAnimation={Layout.duration(250)}
          keyExtractor={(item) => {
            if (typeof item === "string") {
              return item;
            }
            return String(item.id);
          }}
          contentContainerStyle={tw`pb-88`}
          data={subscribedAndAvailablePitchers}
          keyboardShouldPersistTaps="handled"
          ListHeaderComponent={
            <>
              {!isSearchActive &&
                <Animated.View layout={Layout} exiting={FadeOutUp.duration(75)}>
                  <PrimaryText
                    style={tw`text-4xl font-bold tracking-tight mb-3`}
                    accessibilityRole="header"
                  >
                    Probable Pitcher
                  </PrimaryText>
                </Animated.View>
              }
              <SearchInput
                onChange={(text) => setSearchFilter(text)}
                onActive={() => setIsSearchActive(true)}
                onCancel={() => setIsSearchActive(false)}
              />
            </>
          }
          renderItem={({ index, item }) => {
            if (typeof item === "string") {
              return (
                <Animated.View entering={FadeIn} exiting={FadeOut}>
                  <View style={tw`flex-row justify-between mb-1 mx-3`}>
                    <SecondaryText style={tw`uppercase text-sm`}>
                      {item}
                    </SecondaryText>
                    {index === 0 &&
                      (search.isFetching ||
                        (!search.isSuccess && !!searchFilter) ||
                        mutationTracker.isMutating() ||
                        subscriptions.isFetching) && (
                        <Animated.View entering={FadeIn} exiting={FadeOut}>
                          <ActivityIndicator size="small" />
                        </Animated.View>
                      )}
                  </View>
                </Animated.View>
              );
            } else {
              return (
                <Animated.View entering={FadeIn} exiting={FadeOut}>
                  <PitcherView
                    subscribeHandler={async () => {
                      subscribe({
                        pitcherId: item.id,
                      });
                    }}
                    unsubscribeHandler={isEditing || isSearchActive ? () => {
                      unsubscribe(item.subscription!.id);
                    } : undefined}
                    pitcher={item}
                    disabled={pauseMutations}
                    style={tw.style(
                      "border-b-2",
                      typeof subscribedAndAvailablePitchers[index - 1] ===
                        "string"
                        ? "rounded-t-xl"
                        : undefined,
                      !subscribedAndAvailablePitchers[index + 1] ||
                        typeof subscribedAndAvailablePitchers[index + 1] ===
                        "string"
                        ? "border-b-0 rounded-b-xl mb-3"
                        : undefined
                    )}
                    buttonStyle={style}
                  />
                </Animated.View>
              );
            }
          }}
          ListEmptyComponent={
            <>
              {search.isSuccess && (
                <Animated.View entering={FadeIn.delay(150)} exiting={FadeOut}>
                  <SecondaryText
                    style={tw`mb-6 mx-3 text-sm`}
                    accessibilityRole="summary"
                  >
                    No pitchers found. Try changing your search.
                  </SecondaryText>
                </Animated.View>
              )}
              {search.isInitialLoading ? (
                <Animated.View
                  style={tw`pt-6`}
                  entering={FadeIn}
                  exiting={FadeOut}
                >
                  <ActivityIndicator
                    size="large"
                    color={String(tw.style(specialTextColor).color)}
                  />
                </Animated.View>
              ) : (
                !search.isSuccess && (
                  <Animated.View entering={FadeIn} exiting={FadeOut}>
                    <SecondaryText
                      style={tw`mb-6 mx-3 text-sm`}
                      accessibilityRole="summary"
                    >
                      Search for your favorite pitcher to add them to your list of subscriptions.
                    </SecondaryText>
                  </Animated.View>
                )
              )}
              {search.isError && (
                <Animated.View entering={FadeIn.delay(150)} exiting={FadeOut}>
                  <AlertText
                    style={tw`mb-6 mx-3 text-sm`}
                    accessibilityRole="alert"
                  >
                    An error occurred while performing your search. Please try
                    again later.
                  </AlertText>
                </Animated.View>
              )}
            </>
          }
        />
      </Animated.View>
    </ScreenLayout >
  );
};

const PitcherView = ({
  subscribeHandler,
  unsubscribeHandler,
  pitcher,
  disabled,
  style,
  buttonStyle
}: {
  subscribeHandler: () => void;
  unsubscribeHandler?: () => void;
  pitcher: PitcherSubscription;
  disabled?: boolean;
  style?: ClassInput;
  buttonStyle: StyleProp<Animated.AnimateStyle<StyleProp<ViewStyle>>>;
}) => {
  return (
    <>
      <ThemedView
        style={tw.style(style)}
      >
        {pitcher.subscription && unsubscribeHandler && (
          <Animated.View entering={FadeInLeft} exiting={FadeOutLeft}>
            <ButtonContainer
              style={tw`-my-3 -ml-3 p-3`}
              onPress={unsubscribeHandler}
              accessibilityLabel={""}
              disabled={disabled}
            >
              <Animated.View style={buttonStyle}>
                <AlertText>
                  <AntDesign name="minuscircle" size={16} />
                </AlertText>
              </Animated.View>
            </ButtonContainer>
          </Animated.View>
        )}
        <Animated.View style={tw`flex-1 flex-row justify-between items-center`} layout={Layout}>
          <Animated.View style={tw`flex-row items-center`} layout={Layout}>
            <PrimaryText numberOfLines={1}>
              {pitcher.name}
            </PrimaryText>
            <Animated.View style={tw`items-center mx-3 -my-1.5`} layout={Layout}>
              {pitcher.primaryNumber &&
                <SecondaryText style={tw`text-xs -mb-0.5`}>
                  {pitcher.primaryNumber}
                </SecondaryText>}
              <SecondaryText style={tw`text-xs`}>
                {pitcher.team.abbreviation}
              </SecondaryText>
            </Animated.View>
          </Animated.View>
          {pitcher.nextGameDate && !unsubscribeHandler && (
            <Animated.View style={tw``} entering={FadeInRight} exiting={FadeOutRight} layout={Layout}>
              <SecondaryText style={tw`ml-1.5 text-sm`}>
                {formatInTimeZone(
                  pitcher.nextGameDate,
                  Localization.timezone,
                  "h:mmaaaaa"
                )}
              </SecondaryText>
            </Animated.View>
          )}
        </Animated.View>
        {!pitcher.subscription && (
          <ButtonContainer
            style={tw`-my-3 -mr-3 p-3`}
            onPress={subscribeHandler}
            accessibilityLabel={""}
            disabled={disabled}
          >
            <Animated.View style={buttonStyle}>
              <SpecialText>
                <AntDesign name="pluscircle" size={16} />
              </SpecialText>
            </Animated.View>
          </ButtonContainer>
        )}
      </ThemedView>
    </>
  );
};
