import { AntDesign } from "@expo/vector-icons";
import { Pitcher, Subscription } from "@probable/db";
import { PermissionStatus } from "expo-modules-core";
import * as Notifications from "expo-notifications";
import React, { useState } from "react";
import { ActivityIndicator, View } from "react-native";
import Animated, { FadeIn, FadeOut, Layout } from "react-native-reanimated";
import * as Sentry from "sentry-expo";
import ButtonContainer from "../components/ButtonContainer";
import ScreenLayout from "../components/ScreenLayout";
import SearchInput from "../components/SearchInput";
import {
  AlertText,
  PrimaryText,
  SecondaryText,
  SpecialText,
  specialTextColor,
  ThemedView,
} from "../components/Themed";
import { trpc } from "../components/TRPCProvider";
import { useTrackParallelMutations } from "../hooks/use-track-parallel-mutations";
import tw from "../tailwind";

export const Subscribe = () => {
  const mutationTracker = useTrackParallelMutations();

  const {
    data: subscriptions,
    isSuccess: subscriptionsFetched,
    isFetching: subscriptionsFetching,
  } = trpc.subscription.byUserId.useQuery(undefined, {
    enabled: !mutationTracker.isMutating(),
  });

  const [searchFilter, setSearchFilter] = useState<string>();

  const {
    data: pitchersFromSearch,
    isSuccess,
    isInitialLoading,
    isFetching,
    isError,
  } = trpc.pitcher.byNameSearch.useQuery(searchFilter?.split(" ") || [], {
    enabled: !!searchFilter && subscriptionsFetched,
  });

  const utils = trpc.useContext();

  const pitchers = pitchersFromSearch?.map((pitcher) => ({
    ...pitcher,
    subscription:
      subscriptions?.find((sub) => sub.pitcherId === pitcher.id) || undefined,
  }));

  const { mutate: subscribe } = trpc.subscription.create.useMutation({
    onMutate: ({ pitcherId }) => {
      mutationTracker.startOne();
      const previousSubscriptions = utils.subscription.byUserId.getData();
      utils.subscription.byUserId.setData((old) => {
        if (old) {
          const pitcher = pitchers?.find((p) => p.id === pitcherId);
          if (pitcher) {
            return [
              ...old,
              // Optimistically add a new subscription with some dummy data.
              // This dummy data will be replaced with ids generated by the
              // database once the mutation completes.
              {
                id: new Date().valueOf(),
                enabled: true,
                pitcherId: pitcherId,
                userId: "loading",
                pitcher: {
                  id: pitcherId,
                  name: pitcher.name,
                  teamId: pitcher.teamId,
                  homeGames: pitcher.subscription?.pitcher.homeGames || [],
                  awayGames: pitcher.subscription?.pitcher.awayGames || [],
                },
              },
            ];
          }
        }
      });
      return { previousSubscriptions };
    },
    onError: (err, newSubscription, context) => {
      utils.subscription.byUserId.setData(context?.previousSubscriptions);
      Sentry.Native.captureException(err);
    },
    onSettled: () => {
      mutationTracker.endOne();
      if (mutationTracker.allEnded()) {
        utils.subscription.byUserId.invalidate();
        utils.pitcher.byNameSearch.invalidate();
      }
    },
  });

  const { mutate: unsubscribe } = trpc.subscription.delete.useMutation({
    onMutate: (subscriptionId) => {
      mutationTracker.startOne();
      const previousSubscriptions = utils.subscription.byUserId.getData();
      utils.subscription.byUserId.setData((old) =>
        old?.filter((s) => s.id !== subscriptionId)
      );
      return { previousSubscriptions };
    },
    onError: (err, newSubscription, context) => {
      utils.subscription.byUserId.setData(context?.previousSubscriptions);
      Sentry.Native.captureException(err);
    },
    onSettled: () => {
      mutationTracker.endOne();
      if (mutationTracker.allEnded()) {
        utils.subscription.byUserId.invalidate();
        utils.pitcher.byNameSearch.invalidate();
      }
    },
  });

  const [pushStatus, setPushStatus] = useState<PermissionStatus>();

  Notifications.getPermissionsAsync().then(({ status }) => {
    setPushStatus(status);
  });

  // Why not just use section list? It doesn't have support from Reanimated's "itemLayoutAnimation"
  // prop, which we are depending on below for the cool layout transitions.
  const subscribedAndAvailablePitchers: (
    | string
    | (Pitcher & { subscription?: Subscription })
  )[] = [];

  if (subscriptions) {
    const subscribedPitchers =
      (searchFilter
        ? pitchers
            ?.filter((p) => p.subscription)
            .map(
              (p) =>
                ({
                  id: p.id,
                  name: p.name,
                  teamId: p.teamId,
                  subscription: {
                    id: p.subscription!.id,
                    pitcherId: p.id,
                    userId: p.subscription!.userId,
                  },
                } as Pitcher & { subscription?: Subscription })
            )
        : subscriptions.map(
            (s) =>
              ({
                id: s.pitcher.id,
                name: s.pitcher.name,
                teamId: s.pitcher.teamId,
                subscription: {
                  id: s.id,
                  pitcherId: s.pitcherId,
                  userId: s.userId,
                },
              } as Pitcher & { subscription?: Subscription })
          )) || [];
    if (!!subscribedPitchers.length) {
      subscribedAndAvailablePitchers.push("Subscribed");
      subscribedAndAvailablePitchers.push(...subscribedPitchers);
    }
  }

  if (searchFilter) {
    const availablePitchers =
      pitchers?.filter((p) => !p.subscription) || [] || [];
    if (!!availablePitchers.length) {
      subscribedAndAvailablePitchers.push("Available");
      subscribedAndAvailablePitchers.push(...availablePitchers);
    }
  }

  return (
    <ScreenLayout>
      <Animated.FlatList
        // @ts-ignore - there is a type bug in Reanimated 2.9.x
        itemLayoutAnimation={Layout}
        keyExtractor={(item) => {
          if (typeof item === "string") {
            return item;
          }
          return String(item.id);
        }}
        contentContainerStyle={tw`px-3 pt-9 pb-12`}
        data={subscribedAndAvailablePitchers}
        keyboardShouldPersistTaps="handled"
        ListHeaderComponent={
          <SearchInput
            style={tw`mb-9`}
            onChange={(text) => {
              setSearchFilter(text);
            }}
          />
        }
        renderItem={({ index, item }) => {
          if (typeof item === "string") {
            return (
              <Animated.View entering={FadeIn} exiting={FadeOut}>
                <View style={tw`flex-row justify-between mb-1.5 mx-3`}>
                  <SecondaryText style={tw`uppercase text-sm`}>
                    {item}
                  </SecondaryText>
                  {index === 0 && (
                    <ActivityIndicator
                      size="small"
                      hidesWhenStopped
                      animating={
                        isFetching ||
                        (!isSuccess && !!searchFilter) ||
                        mutationTracker.isMutating() ||
                        subscriptionsFetching
                      }
                    />
                  )}
                </View>
              </Animated.View>
            );
          } else {
            return (
              <Animated.View entering={FadeIn} exiting={FadeOut}>
                <ThemedView
                  style={tw.style(
                    "border-b-2",
                    typeof subscribedAndAvailablePitchers[index - 1] ===
                      "string"
                      ? "rounded-t-xl"
                      : undefined,
                    !subscribedAndAvailablePitchers[index + 1] ||
                      typeof subscribedAndAvailablePitchers[index + 1] ===
                        "string"
                      ? "border-b-0 rounded-b-xl mb-6"
                      : undefined
                  )}
                >
                  <PrimaryText style={tw`flex-1 pr-2.5`} numberOfLines={1}>
                    {item.name}
                  </PrimaryText>
                  {item.subscription && (
                    <ButtonContainer
                      style={tw`-my-3 -mr-3 py-3 pl-3 pr-3`}
                      onPress={() => {
                        unsubscribe(item.subscription!.id);
                      }}
                      accessibilityLabel={""}
                      disabled={
                        item.subscription.userId === "loading" ||
                        mutationTracker.isMutating() ||
                        isFetching ||
                        (!isSuccess && !!searchFilter) ||
                        !subscriptionsFetched ||
                        subscriptionsFetching
                      }
                    >
                      <AlertText
                        style={tw`${
                          item.subscription.userId === "loading" ||
                          mutationTracker.isMutating() ||
                          isFetching ||
                          (!isSuccess && !!searchFilter) ||
                          !subscriptionsFetched ||
                          subscriptionsFetching
                            ? "opacity-20"
                            : "opacity-100"
                        }`}
                      >
                        <AntDesign name="minuscircle" size={20} />
                      </AlertText>
                    </ButtonContainer>
                  )}
                  {!item.subscription && (
                    <ButtonContainer
                      style={tw`-my-3 -mr-3 py-3 pl-3 pr-3`}
                      onPress={async () => {
                        if (pushStatus === PermissionStatus.DENIED) {
                          alert(
                            "Permission for this application to send push notifications has been denied. To receive alerts, you must allow notifications for Probable Pitcher in your phone's application settings."
                          );
                        }
                        subscribe({
                          pitcherId: item.id,
                        });
                      }}
                      disabled={
                        mutationTracker.isMutating() || isFetching || !isSuccess
                      }
                    >
                      <SpecialText
                        style={tw`${
                          mutationTracker.isMutating() ||
                          isFetching ||
                          !isSuccess
                            ? "opacity-20"
                            : "opacity-100"
                        }`}
                      >
                        <AntDesign name="pluscircle" size={20} />
                      </SpecialText>
                    </ButtonContainer>
                  )}
                </ThemedView>
              </Animated.View>
            );
          }
        }}
        ListEmptyComponent={
          <>
            {isSuccess && (
              <Animated.View entering={FadeIn.delay(150)} exiting={FadeOut}>
                <SecondaryText
                  style={tw`mb-9 mx-3 text-sm`}
                  accessibilityRole="summary"
                >
                  No pitchers found. Try changing your search.
                </SecondaryText>
              </Animated.View>
            )}
            {isInitialLoading ? (
              <Animated.View entering={FadeIn} exiting={FadeOut}>
                <ActivityIndicator
                  size="large"
                  color={String(tw.style(specialTextColor).color)}
                />
              </Animated.View>
            ) : (
              !isSuccess && (
                <Animated.View entering={FadeIn} exiting={FadeOut}>
                  <SecondaryText
                    style={tw`mb-9 mx-3 text-sm`}
                    accessibilityRole="summary"
                  >
                    Enter a player's name to perform a search.
                  </SecondaryText>
                </Animated.View>
              )
            )}
            {isError && (
              <Animated.View entering={FadeIn.delay(150)} exiting={FadeOut}>
                <AlertText
                  style={tw`mb-9 mx-3 text-sm`}
                  accessibilityRole="alert"
                >
                  An error occurred while performing your search. Please try
                  again later.
                </AlertText>
              </Animated.View>
            )}
          </>
        }
      />
    </ScreenLayout>
  );
};
